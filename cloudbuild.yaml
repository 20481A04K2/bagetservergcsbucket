steps:
  # Step 1: Download GitHub repo ZIP and extract it
  - name: 'gcr.io/cloud-builders/curl'
    id: 'Download GitHub Source'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        apt-get update && apt-get install -y unzip
        echo "Downloading GitHub source zip..."
        curl -L -o source.zip https://github.com/20481A04K2/bagetservergcsbucket/archive/refs/heads/main.zip
        unzip source.zip -d /workspace
        mv /workspace/bagetservergcsbucket-main /workspace/app

  # Step 2: Create NuGet.Config dynamically with BaGet source and API key
  - name: 'mcr.microsoft.com/dotnet/sdk:7.0'
    id: 'Create NuGet Config'
    entrypoint: 'bash'
    secretEnv: ['BAGET_API_KEY']
    args:
      - '-c'
      - |
        echo "Creating NuGet.Config with BaGet source..."
        cat > /workspace/app/NuGet.Config <<EOF
        <?xml version="1.0" encoding="utf-8"?>
        <configuration>
          <packageSources>
            <clear />
            <add key="baget" value="http://34.80.5.89:8080/v3/index.json" />
          </packageSources>
          <packageSourceCredentials>
            <baget>
              <add key="Username" value="anyuser" />
              <add key="ClearTextPassword" value="$$BAGET_API_KEY" />
            </baget>
          </packageSourceCredentials>
        </configuration>
        EOF

  # Step 3: Build and Publish .NET App (detect project file dynamically)
  - name: 'mcr.microsoft.com/dotnet/sdk:7.0'
    id: 'Publish App'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        cd /workspace/app
        echo "Finding .csproj file..."
        project_file=$(find . -name '*.csproj' | head -n 1)
        echo "Detected project file: $project_file"
        if [ -z "$project_file" ]; then
          echo "No .csproj file found! Aborting."
          exit 1
        fi
        echo "Publishing application (this will restore packages implicitly)..."
        dotnet publish "$project_file" --configfile NuGet.Config -c Release -o dist
        echo "Contents of dist:"
        ls -lh dist

  # Step 4: Upload dist/ to GCS
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    id: 'Upload to GCS'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        echo "Uploading dist/ to GCS..."
        gsutil -m cp -r /workspace/app/dist/* gs://my-dotnet-packages/dist/

availableSecrets:
  secretManager:
    - versionName: projects/onyx-antler-459216-j6/secrets/baget-api-key/versions/latest
      env: BAGET_API_KEY

options:
  logging: CLOUD_LOGGING_ONLY
